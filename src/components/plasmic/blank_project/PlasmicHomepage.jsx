// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iE1LgH53bc47vxxsWX9owA
// Component: bRJ4pLXDs14_
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_blank_project.module.css" // plasmic-import: iE1LgH53bc47vxxsWX9owA/projectcss
import * as sty from "./PlasmicHomepage.module.css" // plasmic-import: bRJ4pLXDs14_/css
import _3SsOqWtYj5U3NnUe3AoJgpngXoLGcabph from "./images/_3SsOqWtYj5U3NnUe3AoJgpng.png" // plasmic-import: XoLGcabph/picture

export const PlasmicHomepage__VariantProps = new Array()

export const PlasmicHomepage__ArgProps = new Array()

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fshBj)}>
            <div className={classNames(projectcss.all, sty.freeBox___4Wb85)}>
              <div className={classNames(projectcss.all, sty.freeBox__oup9G)}>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__zSKqG)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.column__oFkew)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.column__u2Y4)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.column__uHfNs)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.column__oWKu)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.column__twu31)}
                  />
                </div>
              </div>

              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"798px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"1522px"}
                loading={"lazy"}
                src={{
                  src: _3SsOqWtYj5U3NnUe3AoJgpngXoLGcabph,
                  fullWidth: 1080,
                  fullHeight: 1920,
                  aspectRatio: undefined,
                }}
              />
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: ["root", "columns", "img"],
  columns: ["columns"],
  img: ["img"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps,
    })

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage"
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`
  }
  return func
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
  }
)

export default PlasmicHomepage
/* prettier-ignore-end */
